var searchIndex = JSON.parse('{\
"bootloader":{"doc":"An experimental x86_64 bootloader that works on both BIOS …","t":[3,0,12,11,11,14,11,12,11,11,12,12,12,12,12,12,12,12,12,11,11,11,13,3,13,3,3,3,4,3,13,4,4,13,13,3,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12],"n":["Config","boot_info","boot_info_address","borrow","borrow_mut","entry_point","fmt","framebuffer_address","from","into","kernel_stack_address","kernel_stack_size","map_framebuffer","map_page_table_recursively","map_physical_memory","minimum_framebuffer_height","minimum_framebuffer_width","physical_memory_offset","recursive_index","try_from","try_into","type_id","BGR","BootInfo","Bootloader","FrameBuffer","FrameBufferInfo","MemoryRegion","MemoryRegionKind","MemoryRegions","None","Optional","PixelFormat","RGB","Some","TlsTemplate","U8","UnknownBios","UnknownUefi","Usable","as_mut","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer","buffer_mut","byte_len","bytes_per_pixel","clone","clone","clone","clone","clone","clone","cmp","deref","deref_mut","empty","end","eq","eq","eq","eq","eq","file_size","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","framebuffer","from","from","from","from","from","from","from","from","from","from","from","hash","horizontal_resolution","info","into","into","into","into","into","into","into","into","into","into_option","kind","mem_size","memory_regions","ne","ne","ne","ne","partial_cmp","physical_memory_offset","pixel_format","pre_release","recursive_index","rsdp_addr","start","start_addr","stride","tls_template","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","version_major","version_minor","version_patch","vertical_resolution","0","0","0"],"q":["bootloader","","","","","","","","","","","","","","","","","","","","","","bootloader::boot_info","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bootloader::boot_info::MemoryRegionKind","","bootloader::boot_info::Optional"],"d":["Allows configuring the bootloader behavior.","Contains the boot information struct sent by the …","Create the boot information at the given virtual address.","","","Defines the entry point function.","","Map the framebuffer memory at the specified virtual …","","","Create the kernel stack at the given virtual address.","Use the given stack size for the kernel.","Whether to map the framebuffer to virtual memory.","Whether to create a recursive entry in the level 4 page …","Whether to create a virtual mapping of the complete …","Desired minimum height of the framebuffer mode.","Desired minimum width of the framebuffer mode.","Map the physical memory at a specified virtual address.","Create the recursive mapping in at the given entry of the …","","","","One byte blue, then one byte green, then one byte red.","This structure represents the information that the …","Memory mappings created by the bootloader, including the …","A pixel-based framebuffer that controls the screen output.","Describes the layout and pixel format of a framebuffer.","Represent a physical memory region.","Represents the different types of memory.","FFI-safe slice of <code>MemoryRegion</code> structs, semantically …","No value","FFI-safe variant of <code>Option</code>.","Color format of pixels in the framebuffer.","One byte red, then one byte green, then one byte blue.","Some value <code>T</code>","Information about the thread local storage (TLS) template.","A single byte, representing the grayscale value.","An unknown memory region reported by the BIOS firmware.","An unknown memory region reported by the UEFI firmware.","Unused conventional memory, can be used by the kernel.","Converts from <code>&amp;mut Optional&lt;T&gt;</code> to <code>Option&lt;&amp;mut T&gt;</code>.","Converts from <code>&amp;Optional&lt;T&gt;</code> to <code>Option&lt;&amp;T&gt;</code>.","","","","","","","","","","","","","","","","","","","Returns the raw bytes of the framebuffer as slice.","Returns the raw bytes of the framebuffer as mutable slice.","The total size in bytes.","The number of bytes per pixel.","","","","","","","","","","Creates a new empty memory region (with length 0).","The physical end address (exclusive) of the region.","","","","","","The number of data bytes in the template.","","","","","","","","","","Information about the framebuffer for screen output if …","","","","","","","","","","","","","The width in pixels.","Returns layout and pixel format information of the …","","","","","","","","","","Converts the <code>Optional</code> to an <code>Option</code>.","The memory type of the memory region.","The total number of bytes that the TLS segment should have …","A map of the physical memory regions of the underlying …","","","","","","The virtual address at which the mapping of the physical …","The color format of each pixel.","Whether the bootloader version is a pre-release.","The virtual address of the recursively mapped level 4 page …","The address of the <code>RSDP</code> data structure, which can be use …","The physical start address of the region.","The virtual start address of the thread local storage …","Number of pixels between the start of a line and the start …","The thread local storage (TLS) template of the kernel …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Bootloader version (major).","Bootloader version (minor).","Bootloader version (patch).","The height in pixels.","","",""],"i":[0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,3,0,0,0,0,0,4,0,0,2,4,0,2,3,3,3,4,4,5,6,7,3,8,9,2,10,4,5,6,7,3,8,9,2,10,4,8,8,9,9,7,3,9,2,10,4,4,6,6,7,7,7,3,2,10,4,10,5,6,7,3,8,9,2,10,4,5,5,6,6,7,3,8,9,2,10,4,4,4,9,8,5,6,7,3,8,9,2,10,4,4,7,10,5,7,3,10,4,4,5,9,5,5,5,7,10,9,5,5,6,7,3,8,9,2,10,4,5,6,7,3,8,9,2,10,4,5,6,7,3,8,9,2,10,4,5,5,5,9,11,12,13],"f":[null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],null,[[["",0],["formatter",3]],["result",6]],null,[[]],[[]],null,null,null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[["",0]]],null,null,[[["",0]],["memoryregion",3]],[[["",0]],["memoryregionkind",4]],[[["",0]],["framebufferinfo",3]],[[["",0]],["pixelformat",4]],[[["",0]],["tlstemplate",3]],[[["",0]],["optional",4]],[[["",0],["optional",4]],["ordering",4]],[[["",0]]],[[["",0]]],[[]],null,[[["",0],["memoryregion",3]],["bool",0]],[[["",0],["memoryregionkind",4]],["bool",0]],[[["",0],["pixelformat",4]],["bool",0]],[[["",0],["tlstemplate",3]],["bool",0]],[[["",0],["optional",4]],["bool",0]],null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["option",4]]],[[]],[[["",0],["",0]]],null,[[["",0]],["framebufferinfo",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],null,null,null,[[["",0],["memoryregion",3]],["bool",0]],[[["",0],["memoryregionkind",4]],["bool",0]],[[["",0],["tlstemplate",3]],["bool",0]],[[["",0],["optional",4]],["bool",0]],[[["",0],["optional",4]],["option",4,[["ordering",4]]]],null,null,null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null],"p":[[3,"Config"],[4,"PixelFormat"],[4,"MemoryRegionKind"],[4,"Optional"],[3,"BootInfo"],[3,"MemoryRegions"],[3,"MemoryRegion"],[3,"FrameBuffer"],[3,"FrameBufferInfo"],[3,"TlsTemplate"],[13,"UnknownUefi"],[13,"UnknownBios"],[13,"Some"]]},\
"cfg_if":{"doc":"A macro for defining <code>#[cfg]</code> if-else statements.","t":[14],"n":["cfg_if"],"q":["cfg_if"],"d":["The main macro provided by this crate. See crate …"],"i":[0],"f":[null],"p":[]},\
"conquer_once":{"doc":"This crate provides a set of synchronized initialization …","t":[13,4,4,13,13,13,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,0,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,6,6,6,6,6],"n":["AlreadyInit","TryGetError","TryInitError","Uninit","WouldBlock","WouldBlock","borrow","borrow","borrow_mut","borrow_mut","clone","clone","cmp","cmp","doc","eq","eq","fmt","fmt","fmt","fmt","from","from","hash","hash","into","into","noblock","partial_cmp","partial_cmp","spin","try_from","try_from","try_into","try_into","type_id","type_id","Lazy","OnceCell","as_ref","borrow","borrow","borrow","borrow_mut","borrow_mut","deref","drop","fmt","fmt","fmt","from","from","get","get_or_init","get_or_init","get_unchecked","init_once","into","into","into_inner","is_initialized","is_initialized","is_poisoned","is_poisoned","new","new","try_from","try_from","try_get","try_get_or_init","try_init_once","try_into","try_into","type_id","type_id","uninit","Lazy","Once","OnceCell","Lazy","Once","OnceCell"],"q":["conquer_once","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","conquer_once::doc","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","conquer_once::noblock","","","conquer_once::spin","",""],"d":["The <code>OnceCell</code> is already initialized and the initialization …","Possible error variants of non-blocking fallible get calls.","Possible error variants of non-blocking initialization …","The <code>OnceCell</code> is currently not initialized.","The <code>OnceCell</code> is currently being initialized by another …","The <code>OnceCell</code> is currently being initialized by another …","","","","","","","","","Re-exports of internal generic type for the purpose of …","","","","","","","","","","","","","Synchronized one-time and lazy initialization primitives …","","","Synchronized one-time and lazy initialization primitives …","","","","","","","A type for lazy initialization of e.g. global static …","An interior mutability cell type which allows synchronized …","","","","","","","","","","","","","","Returns a reference to the <code>OnceCell</code>’s initialized inner …","Returns a reference to the <code>OnceCell</code>’s initialized inner …","Returns a reference to the already initialized inner value …","Returns a reference to the inner value without checking …","Attempts to initialize the <code>OnceCell</code> with <code>func</code> if it is …","","","Consumes <code>self</code> and returns a <code>Some(T)</code> if the <code>OnceCell</code> has …","Returns true if the <code>OnceCell</code> has been successfully …","Returns <code>true</code> if the <code>Lazy</code> has been successfully initialized.","Returns true if the <code>OnceCell</code> has been poisoned during …","Returns <code>true</code> if the <code>Lazy</code> has been poisoned.","Creates a new <code>OnceCell</code> pre-initialized with <code>value</code>.","Creates a new uninitialized <code>Lazy</code> with the given <code>init</code> …","","","Returns a reference to the <code>OnceCell</code>’s initialized inner …","Returns a reference to the <code>OnceCell</code>’s initialized inner …","Attempts to initialize the <code>OnceCell</code> with <code>func</code> if is is …","","","","","Creates a new uninitialized <code>OnceCell</code>.","A type for lazy initialization of e.g. global static …","A synchronization primitive which can be used to run a …","An interior mutability cell type which allows synchronized …","A type for lazy initialization of e.g. global static …","A synchronization primitive which can be used to run a …","An interior mutability cell type which allows synchronized …"],"i":[1,0,0,2,1,2,1,2,1,2,1,2,1,2,0,1,2,1,1,2,2,1,2,1,2,1,2,0,1,2,0,1,2,1,2,1,2,0,0,3,4,3,3,4,3,3,4,4,3,3,4,3,4,4,3,4,4,4,3,4,4,3,4,3,4,3,4,3,4,4,4,4,3,4,3,4,0,0,0,0,0,0],"f":[null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["tryiniterror",4]],[[["",0]],["trygeterror",4]],[[["",0],["tryiniterror",4]],["ordering",4]],[[["",0],["trygeterror",4]],["ordering",4]],null,[[["",0],["tryiniterror",4]],["bool",0]],[[["",0],["trygeterror",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["",0],["",0]]],[[["",0],["",0]]],[[]],[[]],null,[[["",0],["tryiniterror",4]],["option",4,[["ordering",4]]]],[[["",0],["trygeterror",4]],["option",4,[["ordering",4]]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[["",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["",0]],["option",4]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[]],[[]],[[],["option",4]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[["",0]],["result",4,[["trygeterror",4]]]],[[["",0]],["result",4,[["wouldblockerror",3]]]],[[["",0]],["result",4,[["tryiniterror",4]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],null,null,null,null,null,null],"p":[[4,"TryInitError"],[4,"TryGetError"],[3,"Lazy"],[3,"OnceCell"]]},\
"conquer_util":{"doc":"Common utilities for lock-free and concurrent programming.","t":[3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["BackOff","advise_yield","borrow","borrow_mut","clone","default","fmt","fmt","from","into","new","reset","spin","spin_once","try_from","try_into","type_id"],"q":["conquer_util","","","","","","","","","","","","","","","",""],"d":["A type for exponential back-off in tight loops.","Returns <code>true</code> if further spinning is not advisable and …","","","","","","","","","Creates a new <code>BackOff</code> instance with a fixed exponential …","Resets the <code>BackOff</code> instance to its initial state.","Spins for a bounded number of steps","Spin once.","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,[[["",0]],["bool",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["backoff",3]],[[]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["",0]]],[[["",0]]],[[]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]]],"p":[[3,"BackOff"]]},\
"lock_api":{"doc":"This library provides type-safe and fully-featured <code>Mutex</code> …","t":[16,16,8,16,16,3,3,18,18,18,18,18,18,18,16,16,3,3,3,3,3,3,8,8,8,3,8,8,8,8,8,8,8,8,8,8,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,10,10,10,11,11,11,10,10,10,10,10,10,10,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,10,10,11,11,11,11,11,11,11,11,11,11,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,10,11,11],"n":["Duration","Duration","GetThreadId","GuardMarker","GuardMarker","GuardNoSend","GuardSend","INIT","INIT","INIT","INIT","INIT","INIT","INIT","Instant","Instant","MappedMutexGuard","MappedReentrantMutexGuard","MappedRwLockReadGuard","MappedRwLockWriteGuard","Mutex","MutexGuard","RawMutex","RawMutexFair","RawMutexTimed","RawReentrantMutex","RawRwLock","RawRwLockDowngrade","RawRwLockFair","RawRwLockRecursive","RawRwLockRecursiveTimed","RawRwLockTimed","RawRwLockUpgrade","RawRwLockUpgradeDowngrade","RawRwLockUpgradeFair","RawRwLockUpgradeTimed","ReentrantMutex","ReentrantMutexGuard","RwLock","RwLockReadGuard","RwLockUpgradableReadGuard","RwLockWriteGuard","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bump","bump","bump","bump","bump","bump","bump","bump","bump_exclusive","bump_exclusive","bump_shared","bump_shared","bump_upgradable","bump_upgradable","const_new","const_new","const_new","data_ptr","data_ptr","data_ptr","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","downgrade","downgrade","downgrade","downgrade_to_upgradable","downgrade_to_upgradable","downgrade_upgradable","drop","drop","drop","drop","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","force_unlock","force_unlock","force_unlock_fair","force_unlock_fair","force_unlock_read","force_unlock_read_fair","force_unlock_write","force_unlock_write_fair","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_mut","get_mut","get_mut","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_inner","into_inner","into_inner","is_locked","is_locked","is_locked","is_locked","is_locked","is_locked","is_locked","is_locked","is_locked_exclusive","is_locked_exclusive","is_locked_exclusive","is_owned_by_current_thread","is_owned_by_current_thread","lock","lock","lock","lock","lock_exclusive","lock_shared","lock_shared_recursive","lock_upgradable","map","map","map","map","map","map","map","map","mutex","new","new","new","nonzero_thread_id","raw","raw","raw","read","read_recursive","remutex","rwlock","rwlock","rwlock","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_lock","try_lock","try_lock","try_lock","try_lock_exclusive","try_lock_exclusive_for","try_lock_exclusive_until","try_lock_for","try_lock_for","try_lock_for","try_lock_for","try_lock_shared","try_lock_shared_for","try_lock_shared_recursive","try_lock_shared_recursive_for","try_lock_shared_recursive_until","try_lock_shared_until","try_lock_until","try_lock_until","try_lock_until","try_lock_until","try_lock_upgradable","try_lock_upgradable_for","try_lock_upgradable_until","try_map","try_map","try_map","try_map","try_map","try_map","try_map","try_map","try_read","try_read_for","try_read_recursive","try_read_recursive_for","try_read_recursive_until","try_read_until","try_upgradable_read","try_upgradable_read_for","try_upgradable_read_until","try_upgrade","try_upgrade","try_upgrade_for","try_upgrade_for","try_upgrade_until","try_upgrade_until","try_write","try_write_for","try_write_until","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unlock","unlock","unlock_exclusive","unlock_exclusive_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_shared","unlock_shared_fair","unlock_upgradable","unlock_upgradable_fair","unlocked","unlocked","unlocked","unlocked","unlocked","unlocked_fair","unlocked_fair","unlocked_fair","unlocked_fair","unlocked_fair","upgradable_read","upgrade","upgrade","write"],"q":["lock_api","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Duration type used for <code>try_lock_for</code>.","Duration type used for <code>try_lock_for</code>.","Helper trait which returns a non-zero thread ID.","Marker type which determines whether a lock guard should …","Marker type which determines whether a lock guard should …","Marker type which indicates that the Guard type for a lock …","Marker type which indicates that the Guard type for a lock …","Initial value for an unlocked mutex.","Initial value for an unlocked mutex.","Initial value.","Initial value.","Initial value for an unlocked mutex.","Initial value for an unlocked <code>RwLock</code>.","Initial value for an unlocked <code>RwLock</code>.","Instant type used for <code>try_lock_until</code>.","Instant type used for <code>try_lock_until</code>.","An RAII mutex guard returned by <code>MutexGuard::map</code>, which can …","An RAII mutex guard returned by <code>ReentrantMutexGuard::map</code>, …","An RAII read lock guard returned by <code>RwLockReadGuard::map</code>, …","An RAII write lock guard returned by <code>RwLockWriteGuard::map</code>…","A mutual exclusion primitive useful for protecting shared …","An RAII implementation of a “scoped lock” of a mutex. …","Basic operations for a mutex.","Additional methods for mutexes which support fair …","Additional methods for mutexes which support locking with …","A raw mutex type that wraps another raw mutex to provide …","Basic operations for a reader-writer lock.","Additional methods for RwLocks which support atomically …","Additional methods for RwLocks which support fair …","Additional methods for RwLocks which support recursive …","Additional methods for RwLocks which support recursive …","Additional methods for RwLocks which support locking with …","Additional methods for RwLocks which support atomically …","Additional methods for RwLocks which support upgradable …","Additional methods for RwLocks which support upgradable …","Additional methods for RwLocks which support upgradable …","A mutex which can be recursively locked by a single thread.","An RAII implementation of a “scoped lock” of a …","A reader-writer lock","RAII structure used to release the shared read access of a …","RAII structure used to release the upgradable read access …","RAII structure used to release the exclusive write access …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Temporarily yields the mutex to a waiting thread if there …","Temporarily yields the mutex to a waiting thread if there …","Temporarily yields the mutex to a waiting thread if there …","Temporarily yields the mutex to a waiting thread if there …","Temporarily yields the mutex to a waiting thread if there …","Temporarily yields the <code>RwLock</code> to a waiting thread if there …","Temporarily yields the <code>RwLock</code> to a waiting thread if there …","Temporarily yields the <code>RwLock</code> to a waiting thread if there …","Temporarily yields an exclusive lock to a waiting thread …","Temporarily yields an exclusive lock to a waiting thread …","Temporarily yields a shared lock to a waiting thread if …","Temporarily yields a shared lock to a waiting thread if …","Temporarily yields an upgradable lock to a waiting thread …","Temporarily yields an upgradable lock to a waiting thread …","Creates a new mutex based on a pre-existing raw mutex.","Creates a new reentrant mutex based on a pre-existing raw …","Creates a new new instance of an <code>RwLock&lt;T&gt;</code> based on a …","Returns a raw pointer to the underlying data.","Returns a raw pointer to the underlying data.","Returns a raw pointer to the underlying data.","","","","","","","","","","","","","","","","","Atomically downgrades an exclusive lock into a shared lock …","Atomically downgrades a write lock into a read lock …","Atomically downgrades an upgradable read lock lock into a …","Downgrades an exclusive lock to an upgradable lock.","Atomically downgrades a write lock into an upgradable read …","Downgrades an upgradable lock to a shared lock.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Forcibly unlocks the mutex.","Forcibly unlocks the mutex.","Forcibly unlocks the mutex using a fair unlock procotol.","Forcibly unlocks the mutex using a fair unlock protocol.","Forcibly unlocks a read lock.","Forcibly unlocks a read lock using a fair unlock procotol.","Forcibly unlocks a write lock.","Forcibly unlocks a write lock using a fair unlock procotol.","","","","","","","","","","","","","","","","","","","","","","Returns a mutable reference to the underlying data.","Returns a mutable reference to the underlying data.","Returns a mutable reference to the underlying data.","","","","","","","","","","","","","","","","Consumes this mutex, returning the underlying data.","Consumes this mutex, returning the underlying data.","Consumes this <code>RwLock</code>, returning the underlying data.","Checks whether the mutex is currently locked.","Checks whether the mutex is currently locked.","Checks whether the mutex is currently locked.","Checks whether the mutex is currently locked.","Checks whether the mutex is currently locked.","Checks if this <code>RwLock</code> is currently locked in any way.","Checks if this <code>RwLock</code> is currently locked in any way.","Checks whether this <code>RwLock</code> is currently locked in any way.","Check if this <code>RwLock</code> is currently exclusively locked.","Check if this <code>RwLock</code> is currently exclusively locked.","Check if this <code>RwLock</code> is currently exclusively locked.","Checks whether the mutex is currently held by the current …","Checks whether the mutex is currently held by the current …","Acquires this mutex, blocking the current thread until it …","Acquires a mutex, blocking the current thread until it is …","Acquires this mutex, blocking if it’s held by another …","Acquires a reentrant mutex, blocking the current thread …","Acquires an exclusive lock, blocking the current thread …","Acquires a shared lock, blocking the current thread until …","Acquires a shared lock without deadlocking in case of a …","Acquires an upgradable lock, blocking the current thread …","Makes a new <code>MappedMutexGuard</code> for a component of the locked …","Makes a new <code>MappedMutexGuard</code> for a component of the locked …","Makes a new <code>MappedReentrantMutexGuard</code> for a component of …","Makes a new <code>MappedReentrantMutexGuard</code> for a component of …","Make a new <code>MappedRwLockReadGuard</code> for a component of the …","Make a new <code>MappedRwLockWriteGuard</code> for a component of the …","Make a new <code>MappedRwLockReadGuard</code> for a component of the …","Make a new <code>MappedRwLockWriteGuard</code> for a component of the …","Returns a reference to the original <code>Mutex</code> object.","Creates a new mutex in an unlocked state ready for use.","Creates a new reentrant mutex in an unlocked state ready …","Creates a new instance of an <code>RwLock&lt;T&gt;</code> which is unlocked.","Returns a non-zero thread ID which identifies the current …","Returns the underlying raw mutex object.","Returns the underlying raw mutex object.","Returns the underlying raw reader-writer lock object.","Locks this <code>RwLock</code> with shared read access, blocking the …","Locks this <code>RwLock</code> with shared read access, blocking the …","Returns a reference to the original <code>ReentrantMutex</code> object.","Returns a reference to the original reader-writer lock …","Returns a reference to the original reader-writer lock …","Returns a reference to the original reader-writer lock …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attempts to acquire this mutex without blocking. Returns …","Attempts to acquire this lock.","Attempts to acquire this mutex without blocking. Returns …","Attempts to acquire this lock.","Attempts to acquire an exclusive lock without blocking.","Attempts to acquire an exclusive lock until a timeout is …","Attempts to acquire an exclusive lock until a timeout is …","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire a shared lock without blocking.","Attempts to acquire a shared lock until a timeout is …","Attempts to acquire a shared lock without deadlocking in …","Attempts to acquire a shared lock until a timeout is …","Attempts to acquire a shared lock until a timeout is …","Attempts to acquire a shared lock until a timeout is …","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire an upgradable lock without blocking.","Attempts to acquire an upgradable lock until a timeout is …","Attempts to acquire an upgradable lock until a timeout is …","Attempts to make a new <code>MappedMutexGuard</code> for a component of …","Attempts to make a new <code>MappedMutexGuard</code> for a component of …","Attempts to make  a new <code>MappedReentrantMutexGuard</code> for a …","Attempts to make  a new <code>MappedReentrantMutexGuard</code> for a …","Attempts to make  a new <code>MappedRwLockReadGuard</code> for a …","Attempts to make  a new <code>MappedRwLockWriteGuard</code> for a …","Attempts to make  a new <code>MappedRwLockReadGuard</code> for a …","Attempts to make  a new <code>MappedRwLockWriteGuard</code> for a …","Attempts to acquire this <code>RwLock</code> with shared read access.","Attempts to acquire this <code>RwLock</code> with shared read access …","Attempts to acquire this <code>RwLock</code> with shared read access.","Attempts to acquire this <code>RwLock</code> with shared read access …","Attempts to acquire this <code>RwLock</code> with shared read access …","Attempts to acquire this <code>RwLock</code> with shared read access …","Attempts to acquire this <code>RwLock</code> with upgradable read …","Attempts to acquire this <code>RwLock</code> with upgradable read …","Attempts to acquire this <code>RwLock</code> with upgradable read …","Attempts to upgrade an upgradable lock to an exclusive …","Tries to atomically upgrade an upgradable read lock into a …","Attempts to upgrade an upgradable lock to an exclusive …","Tries to atomically upgrade an upgradable read lock into a …","Attempts to upgrade an upgradable lock to an exclusive …","Tries to atomically upgrade an upgradable read lock into a …","Attempts to lock this <code>RwLock</code> with exclusive write access.","Attempts to acquire this <code>RwLock</code> with exclusive write …","Attempts to acquire this <code>RwLock</code> with exclusive write …","","","","","","","","","","","","","","","","Unlocks this mutex.","Unlocks this mutex. The inner mutex may not be unlocked if …","Releases an exclusive lock.","Releases an exclusive lock using a fair unlock protocol.","Unlocks this mutex using a fair unlock protocol.","Unlocks the mutex using a fair unlock protocol.","Unlocks the mutex using a fair unlock protocol.","Unlocks this mutex using a fair unlock protocol. The inner …","Unlocks the mutex using a fair unlock protocol.","Unlocks the mutex using a fair unlock protocol.","Unlocks the <code>RwLock</code> using a fair unlock protocol.","Unlocks the <code>RwLock</code> using a fair unlock protocol.","Unlocks the <code>RwLock</code> using a fair unlock protocol.","Unlocks the <code>RwLock</code> using a fair unlock protocol.","Unlocks the <code>RwLock</code> using a fair unlock protocol.","Releases a shared lock.","Releases a shared lock using a fair unlock protocol.","Releases an upgradable lock.","Releases an upgradable lock using a fair unlock protocol.","Temporarily unlocks the mutex to execute the given …","Temporarily unlocks the mutex to execute the given …","Temporarily unlocks the <code>RwLock</code> to execute the given …","Temporarily unlocks the <code>RwLock</code> to execute the given …","Temporarily unlocks the <code>RwLock</code> to execute the given …","Temporarily unlocks the mutex to execute the given …","Temporarily unlocks the mutex to execute the given …","Temporarily unlocks the <code>RwLock</code> to execute the given …","Temporarily unlocks the <code>RwLock</code> to execute the given …","Temporarily unlocks the <code>RwLock</code> to execute the given …","Locks this <code>RwLock</code> with upgradable read access, blocking …","Upgrades an upgradable lock to an exclusive lock.","Atomically upgrades an upgradable read lock lock into a …","Locks this <code>RwLock</code> with exclusive write access, blocking …"],"i":[1,2,0,3,4,0,0,3,3,5,5,6,4,4,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,8,9,10,11,6,12,13,14,15,16,17,18,19,20,7,8,9,10,11,6,12,13,14,15,16,17,18,19,20,21,21,10,6,13,16,17,18,22,22,22,22,23,23,9,12,15,9,12,15,9,12,15,10,11,13,14,16,17,18,19,20,10,11,17,20,24,17,18,25,17,25,10,11,13,14,16,17,18,19,20,9,10,10,11,11,12,13,13,14,14,15,16,16,17,17,18,18,19,19,20,20,9,12,9,12,15,15,15,15,7,8,9,9,9,10,11,6,12,12,12,13,14,15,15,15,16,17,18,19,20,9,12,15,7,8,9,10,11,6,12,13,14,15,16,17,18,19,20,9,12,15,3,3,9,6,12,4,4,15,4,4,15,6,12,3,9,6,12,4,4,26,27,10,11,13,14,16,17,19,20,10,9,12,15,5,9,12,15,15,15,13,16,17,18,7,8,9,10,11,6,12,13,14,15,16,17,18,19,20,7,8,9,10,11,6,12,13,14,15,16,17,18,19,20,3,9,6,12,4,2,2,1,9,6,12,4,2,26,28,28,2,1,9,6,12,27,29,29,10,11,13,14,16,17,19,20,15,15,15,15,15,15,15,15,15,27,18,29,18,29,18,15,15,15,7,8,9,10,11,6,12,13,14,15,16,17,18,19,20,3,6,4,22,21,10,11,6,13,14,16,17,18,19,20,4,22,27,23,10,13,16,17,18,10,13,16,17,18,15,27,18,15],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["mutex",3]],[[],["reentrantmutex",3]],[[],["rwlock",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["mutex",3]],[[],["reentrantmutex",3]],[[],["rwlock",3]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[],["rwlockreadguard",3]],[[],["rwlockreadguard",3]],[[["",0]]],[[],["rwlockupgradablereadguard",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[]],[[]],[[]],[[["never",0]]],[[],["mutex",3]],[[]],[[]],[[]],[[],["reentrantmutex",3]],[[]],[[["never",0]]],[[]],[[]],[[]],[[["never",0]]],[[],["rwlock",3]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]]],[[["",0]],["mutexguard",3]],[[["",0]]],[[["",0]],["reentrantmutexguard",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["mappedmutexguard",3,[["sized",8]]]],[[],["mappedmutexguard",3,[["sized",8]]]],[[],["mappedreentrantmutexguard",3,[["sized",8]]]],[[],["mappedreentrantmutexguard",3,[["sized",8]]]],[[],["mappedrwlockreadguard",3,[["sized",8]]]],[[],["mappedrwlockwriteguard",3,[["sized",8]]]],[[],["mappedrwlockreadguard",3,[["sized",8]]]],[[],["mappedrwlockwriteguard",3,[["sized",8]]]],[[["",0]],["mutex",3]],[[],["mutex",3]],[[],["reentrantmutex",3]],[[],["rwlock",3]],[[["",0]],["nonzerousize",3]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["rwlockreadguard",3]],[[["",0]],["rwlockreadguard",3]],[[["",0]],["reentrantmutex",3]],[[["",0]],["rwlock",3]],[[["",0]],["rwlock",3]],[[["",0]],["rwlock",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["bool",0]],[[["",0]],["option",4,[["mutexguard",3]]]],[[["",0]],["bool",0]],[[["",0]],["option",4,[["reentrantmutexguard",3]]]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["option",4,[["mutexguard",3]]]],[[["",0]],["bool",0]],[[["",0]],["option",4,[["reentrantmutexguard",3]]]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["option",4,[["mutexguard",3]]]],[[["",0]],["bool",0]],[[["",0]],["option",4,[["reentrantmutexguard",3]]]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[],["result",4,[["mappedmutexguard",3,[["sized",8]]]]]],[[],["result",4,[["mappedmutexguard",3,[["sized",8]]]]]],[[],["result",4,[["mappedreentrantmutexguard",3,[["sized",8]]]]]],[[],["result",4,[["mappedreentrantmutexguard",3,[["sized",8]]]]]],[[],["result",4,[["mappedrwlockreadguard",3,[["sized",8]]]]]],[[],["result",4,[["mappedrwlockwriteguard",3,[["sized",8]]]]]],[[],["result",4,[["mappedrwlockreadguard",3,[["sized",8]]]]]],[[],["result",4,[["mappedrwlockwriteguard",3,[["sized",8]]]]]],[[["",0]],["option",4,[["rwlockreadguard",3]]]],[[["",0]],["option",4,[["rwlockreadguard",3]]]],[[["",0]],["option",4,[["rwlockreadguard",3]]]],[[["",0]],["option",4,[["rwlockreadguard",3]]]],[[["",0]],["option",4,[["rwlockreadguard",3]]]],[[["",0]],["option",4,[["rwlockreadguard",3]]]],[[["",0]],["option",4,[["rwlockupgradablereadguard",3]]]],[[["",0]],["option",4,[["rwlockupgradablereadguard",3]]]],[[["",0]],["option",4,[["rwlockupgradablereadguard",3]]]],[[["",0]],["bool",0]],[[],["result",4,[["rwlockwriteguard",3]]]],[[["",0]],["bool",0]],[[],["result",4,[["rwlockwriteguard",3]]]],[[["",0]],["bool",0]],[[],["result",4,[["rwlockwriteguard",3]]]],[[["",0]],["option",4,[["rwlockwriteguard",3]]]],[[["",0]],["option",4,[["rwlockwriteguard",3]]]],[[["",0]],["option",4,[["rwlockwriteguard",3]]]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[]],[[]],[[["",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["rwlockupgradablereadguard",3]],[[["",0]]],[[],["rwlockwriteguard",3]],[[["",0]],["rwlockwriteguard",3]]],"p":[[8,"RawMutexTimed"],[8,"RawRwLockTimed"],[8,"RawMutex"],[8,"RawRwLock"],[8,"GetThreadId"],[3,"RawReentrantMutex"],[3,"GuardSend"],[3,"GuardNoSend"],[3,"Mutex"],[3,"MutexGuard"],[3,"MappedMutexGuard"],[3,"ReentrantMutex"],[3,"ReentrantMutexGuard"],[3,"MappedReentrantMutexGuard"],[3,"RwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"RwLockUpgradableReadGuard"],[3,"MappedRwLockReadGuard"],[3,"MappedRwLockWriteGuard"],[8,"RawMutexFair"],[8,"RawRwLockFair"],[8,"RawRwLockUpgradeFair"],[8,"RawRwLockDowngrade"],[8,"RawRwLockUpgradeDowngrade"],[8,"RawRwLockRecursive"],[8,"RawRwLockUpgrade"],[8,"RawRwLockRecursiveTimed"],[8,"RawRwLockUpgradeTimed"]]},\
"log":{"doc":"A lightweight logging facade.","t":[13,13,13,13,13,13,4,4,8,3,3,13,3,3,3,17,3,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,10,11,11,11,11,11,11,11,14,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,14,14,5,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14],"n":["Debug","Debug","Error","Error","Info","Info","Level","LevelFilter","Log","Metadata","MetadataBuilder","Off","ParseLevelError","Record","RecordBuilder","STATIC_MAX_LEVEL","SetLoggerError","Trace","Trace","Warn","Warn","args","args","as_str","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","builder","builder","clone","clone","clone","clone","cmp","cmp","cmp","cmp","debug","enabled","eq","eq","eq","eq","eq","eq","eq","error","file","file","file_static","file_static","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_str","from_str","ge","ge","ge","ge","gt","gt","gt","gt","hash","hash","hash","hash","info","into","into","into","into","into","into","into","into","le","le","le","le","level","level","level","level","line","line","log","log","log_enabled","logger","lt","lt","lt","lt","max","max","max_level","metadata","metadata","module_path","module_path","module_path_static","module_path_static","ne","ne","ne","new","new","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","set_logger","set_logger_racy","set_max_level","target","target","target","target","to_level","to_level_filter","trace","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","warn"],"q":["logd":["The “debug” level.","Corresponds to the <code>Debug</code> log level.","The “error” level.","Corresponds to the <code>Error</code> log level.","The “info” level.","Corresponds to the <code>Info</code> log level.","An enum representing the available verbosity levels of the …","An enum representing the available verbosity level filters …","A trait encapsulating the operations required of a logger.","Metadata about a log message.","Builder for <code>Metadata</code>.","A level lower than all log levels.","The type returned by <code>from_str</code> when the string doesn’t …","The “payload” of a log message.","Builder for <code>Record</code>.","The statically resolved maximum log level.","The type returned by <code>set_logger</code> if <code>set_logger</code> has already …","The “trace” level.","Corresponds to the <code>Trace</code> log level.","The “warn” level.","Corresponds to the <code>Warn</code> log level.","The message body.","Set <code>args</code>.","Returns the string representation of the <code>Level</code>.","Returns the string representation of the <code>LevelFilter</code>.","","","","","","","","","","","","","","","","","Invoke the builder and return a <code>Record</code>","Returns a <code>Metadata</code> object.","Returns a new builder.","Returns a new builder.","","","","","","","","","Logs a message at the debug level.","Determines if a log message with the specified metadata …","","","","","","","","Logs a message at the error level.","The source file containing the message.","Set <code>file</code>","The module path of the message, if it is a <code>&#39;static</code> string.","Set <code>file</code> to a <code>&#39;static</code> string.","Flushes any buffered records.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Logs a message at the info level.","","","","","","","","","","","","","The verbosity level of the message.","Set <code>Metadata::level</code>.","The verbosity level of the message.","Setter for <code>level</code>.","The line containing the message.","Set <code>line</code>","Logs the <code>Record</code>.","The standard logging macro.","Determines if a message logged at the specified level in …","Returns a reference to the logger.","","","","","Returns the most verbose logging level.","Returns the most verbose logging level filter.","Returns the current maximum log level.","Metadata about the log directive.","Set <code>metadata</code>. Construct a <code>Metadata</code> object with …","The module path of the message.","Set <code>module_path</code>","The module path of the message, if it is a <code>&#39;static</code> string.","Set <code>module_path</code> to a <code>&#39;static</code> string","","","","Construct new <code>RecordBuilder</code>.","Construct a new <code>MetadataBuilder</code>.","","","","","","","Sets the global logger to a <code>&amp;&#39;static Log</code>.","A thread-unsafe version of <code>set_logger</code>.","Sets the global maximum log level.","The name of the target of the directive.","Set <code>Metadata::target</code>","The name of the target of the directive.","Setter for <code>target</code>.","Converts <code>self</code> to the equivalent <code>Level</code>.","Converts the <code>Level</code> to the equivalent <code>LevelFilter</code>.","Logs a message at the trace level.","","","","","","","","","","","","","","","","","","","","","","","","","Logs a message at the warn level."],"i":[1,2,1,2,1,2,0,0,0,0,0,2,0,0,0,0,0,1,2,1,2,3,4,1,2,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,4,6,3,5,1,2,3,5,1,2,5,6,0,9,1,1,2,2,5,6,8,0,3,4,3,4,9,1,1,2,2,3,4,5,6,7,7,8,8,1,2,3,4,5,6,7,8,1,2,1,1,2,2,1,1,2,2,1,2,5,6,0,1,2,3,4,5,6,7,8,1,1,2,2,3,4,5,6,3,4,9,0,0,0,1,1,2,2,1,2,0,3,4,3,4,3,4,5,6,8,4,6,1,1,2,2,5,6,0,0,0,3,4,5,6,2,1,0,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["arguments",3]],[[["",0],["arguments",3]],["recordbuilder",3]],[[["",0]],["str",0]],[[["",0]],["str",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["record",3]],[[["",0]],["metadata",3]],[[],["recordbuilder",3]],[[],["metadatabuilder",3]],[[["",0]],["level",4]],[[["",0]],["levelfilter",4]],[[["",0]],["record",3]],[[["",0]],["metadata",3]],[[["",0],["level",4]],["ordering",4]],[[["",0],["levelfilter",4]],["ordering",4]],[[["",0],["metadata",3]],["ordering",4]],[[["",0],["metadatabuilder",3]],["ordering",4]],null,[[["",0],["metadata",3]],["bool",0]],[[["",0],["level",4]],["bool",0]],[[["",0],["levelfilter",4]],["bool",0]],[[["",0],["level",4]],["bool",0]],[[["",0],["levelfilter",4]],["bool",0]],[[["",0],["metadata",3]],["bool",0]],[[["",0],["metadatabuilder",3]],["bool",0]],[[["",0],["parselevelerror",3]],["bool",0]],null,[[["",0]],["option",4,[["str",0]]]],[[["",0],["option",4,[["str",0]]]],["recordbuilder",3]],[[["",0]],["option",4,[["str",0]]]],[[["",0],["option",4,[["str",0]]]],["recordbuilder",3]],[[["",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",0]],["result",4,[["level",4]]]],[[["str",0]],["result",4,[["levelfilter",4]]]],[[["",0],["levelfilter",4]],["bool",0]],[[["",0],["level",4]],["bool",0]],[[["",0],["levelfilter",4]],["bool",0]],[[["",0],["level",4]],["bool",0]],[[["",0],["levelfilter",4]],["bool",0]],[[["",0],["level",4]],["bool",0]],[[["",0],["levelfilter",4]],["bool",0]],[[["",0],["level",4]],["bool",0]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0],["levelfilter",4]],["bool",0]],[[["",0],["level",4]],["bool",0]],[[["",0],["levelfilter",4]],["bool",0]],[[["",0],["level",4]],["bool",0]],[[["",0]],["level",4]],[[["",0],["level",4]],["recordbuilder",3]],[[["",0]],["level",4]],[[["",0],["level",4]],["metadatabuilder",3]],[[["",0]],["option",4,[["u32",0]]]],[[["",0],["option",4,[["u32",0]]]],["recordbuilder",3]],[[["",0],["record",3]]],null,null,[[],["log",8]],[[["",0],["levelfilter",4]],["bool",0]],[[["",0],["level",4]],["bool",0]],[[["",0],["level",4]],["bool",0]],[[["",0],["levelfilter",4]],["bool",0]],[[],["level",4]],[[],["levelfilter",4]],[[],["levelfilter",4]],[[["",0]],["metadata",3]],[[["",0],["metadata",3]],["recordbuilder",3]],[[["",0]],["option",4,[["str",0]]]],[[["",0],["option",4,[["str",0]]]],["recordbuilder",3]],[[["",0]],["option",4,[["str",0]]]],[[["",0],["option",4,[["str",0]]]],["recordbuilder",3]],[[["",0],["metadata",3]],["bool",0]],[[["",0],["metadatabuilder",3]],["bool",0]],[[["",0],["parselevelerror",3]],["bool",0]],[[],["recordbuilder",3]],[[],["metadatabuilder",3]],[[["",0],["levelfilter",4]],["option",4,[["ordering",4]]]],[[["",0],["level",4]],["option",4,[["ordering",4]]]],[[["",0],["level",4]],["option",4,[["ordering",4]]]],[[["",0],["levelfilter",4]],["option",4,[["ordering",4]]]],[[["",0],["metadata",3]],["option",4,[["ordering",4]]]],[[["",0],["metadatabuilder",3]],["option",4,[["ordering",4]]]],[[["log",8]],["result",4,[["setloggererror",3]]]],[[["log",8]],["result",4,[["setloggererror",3]]]],[[["levelfilter",4]]],[[["",0]],["str",0]],[[["",0],["str",0]],["recordbuilder",3]],[[["",0]],["str",0]],[[["",0],["str",0]],["metadatabuilder",3]],[[["",0]],["option",4,[["level",4]]]],[[["",0]],["levelfilter",4]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null],"p":[[4,"Level"],[4,"LevelFilter"],[3,"Record"],[3,"RecordBuilder"],[3,"Metadata"],[3,"MetadataBuilder"],[3,"SetLoggerError"],[3,"ParseLevelError"],[8,"Log"]]},\
"noto_sans_mono_bitmap":{"doc":"Pre-rasterized bitmap font from “Noto Sans Mono”, an …","t":[3,4,13,4,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["BitmapChar","BitmapHeight","Bold","FontWeight","Light","Regular","Size14","Size16","Size18","Size20","Size22","Size24","Size32","Size64","bitmap","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","fmt","fmt","fmt","from","from","from","get_bitmap","get_bitmap_width","height","into","into","into","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","val","val","width"],"q":["noto_sans_mono_bitmap","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Describes the relevant information for a rendered char of …","The height of the bitmap font. The font size will be a a …","","Supported font weights.","","","","","","","","","","","The actual font data that is <code>height</code> * <code>width</code> bytes in size. …","","","","","","","","","","","","","","","Returns a <code>BitmapChar</code> for the given char, <code>FontWeight</code>, and …","Returns the width in pixels a char will occupy on the …","Height of the bitmap box. The actual font size is slightly …","","","","","","","","","","","","","Returns the numeric value of the enum variant.","Returns the numeric value of the variant.","The width of the bitmap char. It is guaranteed, that all …"],"i":[0,0,1,0,1,1,2,2,2,2,2,2,2,2,3,3,1,2,3,1,2,1,2,3,1,2,3,1,2,0,0,3,3,1,2,3,1,2,3,1,2,3,1,2,1,2,3],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["fontweight",4]],[[["",0]],["bitmapheight",4]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["char",0],["fontweight",4],["bitmapheight",4]],["option",4,[["bitmapchar",3]]]],[[["fontweight",4],["bitmapheight",4]],["usize",0]],[[["",0]],["usize",0]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[],["usize",0]],[[],["usize",0]],[[["",0]],["usize",0]]],"p":[[4,"FontWeight"],[4,"BitmapHeight"],[3,"BitmapChar"]]},\
"printk":{"doc":"A standalone, <code>#![no_std]</code>-friendly <code>Logger</code> crate. Based on …","t":[3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["LockedPrintk","Printk","borrow","borrow","borrow_mut","borrow_mut","clear","draw_grayscale","enabled","flush","force_unlock","from","from","height","home","into","into","log","move_down","new","new","next_line","page_up","putch","render","try_from","try_from","try_into","try_into","type_id","type_id","width","write_str"],"q":["printk","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Memory safety: need to ensure that each instance is mutexed","Structure to render characters to the framebuffer","","","","","Clears the screen","Draws black-and-white pixels on the screen","","","","","","Gets the height of the framebuffer","Moves to the beginning of a line","","","","Moves down by <code>distance</code> number of pixels","","Creates a new empty logging interface","Moves down one line","Moves to the top of the page","Prints an individual character on the screen","Renders characters from the <code>noto-sans-mono-bitmap</code> crate","","","","","","","Gets the width of the framebuffer",""],"i":[0,0,1,2,1,2,2,2,1,1,1,1,2,2,2,1,2,1,2,1,2,2,2,2,2,1,2,1,2,1,2,2,2],"f":[null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[["",0],["usize",0],["usize",0],["u8",0]]],[[["",0],["metadata",3]],["bool",0]],[[["",0]]],[[["",0]]],[[]],[[]],[[["",0]],["usize",0]],[[["",0]]],[[]],[[]],[[["",0],["record",3]]],[[["",0],["usize",0]]],[[["framebufferinfo",3]]],[[["framebufferinfo",3]]],[[["",0]]],[[["",0]]],[[["",0],["char",0]]],[[["",0],["bitmapchar",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["usize",0]],[[["",0],["str",0]],["result",6]]],"p":[[3,"LockedPrintk"],[3,"Printk"]]},\
"scopeguard":{"doc":"A scope guard will run a given closure when it goes out of …","t":[4,3,8,11,11,11,11,14,11,11,11,11,11,11,11,5,11,11,11,10,11,11,11,11,11,11,11,11],"n":["Always","ScopeGuard","Strategy","borrow","borrow","borrow_mut","borrow_mut","defer","deref","deref_mut","drop","fmt","fmt","from","from","guard","into","into","into_inner","should_run","should_run","try_from","try_from","try_into","try_into","type_id","type_id","with_strategy"],"q":["scopeguard","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Always run on scope exit.","<code>ScopeGuard</code> is a scope guard that may own a protected value.","Controls in which cases the associated code should be run","","","","","Macro to create a <code>ScopeGuard</code> (always run).","","","","","","","","Create a new <code>ScopeGuard</code> owning <code>v</code> and with deferred closure …","","","“Defuse” the guard and extract the value without …","Return <code>true</code> if the guard’s associated code should run …","","","","","","","","Create a <code>ScopeGuard</code> that owns <code>v</code> (accessible through deref) …"],"i":[0,0,0,1,2,1,2,0,1,1,1,1,2,1,2,0,1,2,1,3,2,1,2,1,2,1,2,1],"f":[null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[],["scopeguard",3,[["always",4]]]],[[]],[[]],[[]],[[],["bool",0]],[[],["bool",0]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[],["scopeguard",3]]],"p":[[3,"ScopeGuard"],[4,"Always"],[8,"Strategy"]]},\
"spinning_top":{"doc":"Provides a simple spinlock based on the abstractions …","t":[6,3,6,6,11,11,5,11,11,11,11,11,11,11,11,11,11],"n":["MappedSpinlockGuard","RawSpinlock","Spinlock","SpinlockGuard","borrow","borrow_mut","const_spinlock","fmt","from","into","is_locked","lock","try_from","try_into","try_lock","type_id","unlock"],"q":["spinning_top","","","","","","","","","","","","","","","",""],"d":["A RAII guard returned by <code>SpinlockGuard::map</code>.","Provides mutual exclusion based on spinning on an …","A mutual exclusion (Mutex) type based on busy-waiting.","A RAII guard that frees the spinlock when it goes out of …","","","Create an unlocked <code>Spinlock</code> in a <code>const</code> context.","","","","","","","","","",""],"i":[0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1],"f":[null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[],["spinlock",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["bool",0]],[[["",0]],["typeid",3]],[[["",0]]]],"p":[[3,"RawSpinlock"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};